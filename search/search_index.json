{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Rowboat","text":"<p>Rowboat is a low-code AI IDE to build MCP tools connected multi-agent assistants. Rowboat copilot builds the agents for you based on your requirements with the option do everything manually as well.</p> <p>Note: These docs are intended for developers who would like to use our open-source code.</p> <ul> <li>Our source code is on GitHub at @rowboatlabs/rowboat</li> <li>Join us on discord</li> <li>Email us at founders@rowboatlabs.com</li> <li>Visit our website</li> </ul>"},{"location":"#what-is-rowboat","title":"What is RowBoat?","text":"<p>RowBoat is a state-of-art platform to build multi-agent AI systems in a visual interface, with the help of a copilot.</p> <p>RowBoat enables you to build, manage and deploy user-facing assistants. An assistant is made up of multiple agents, each having access to a set of tools and working together to interact with the user as a single assistant. You can connect any MCP tools to the agents.</p> <p>For example, you can build a credit card assistant, where each agent handles a workflow such as outstanding payments, balance inquiries and transaction disputes. You can equip agents with tools to carry out tasks such as fetching payment options, checking outstanding balance and updating user information. The assistant would help your end-users their credit card-related needs without having to talk to a human agent on your end.</p>"},{"location":"#how-rowboat-works","title":"How RowBoat works","text":""},{"location":"#rowboat-studio","title":"RowBoat Studio","text":"<p>RowBoat Studio lets you create AI agents in minutes, using a visual interface and plain language. Here are key components that you will work with:</p> Component Description Highlights Agent Handles a specific part of the conversation andperforms tasks using tools, based on instructions \u2022 Configurable using plain language instructions\u2022 Orchestrate between agents connected as a graph\u2022 Can access tools and knowledge sources (RAG) Playground Interactive environment to test assistantsconversationally as you build them \u2022 Real-time testing and debugging\u2022 Inspect parameters and results of tool calls in-line\u2022 Converse with individual agents or the entire assistant Copilot AI-powered concierge that creates andupdates agents and tools on your behalf \u2022 Context-aware of all components including playground\u2022 Improves agents based on conversations and feedback \u2022 Understands your requests in plain language"},{"location":"#rowboat-chat-api-sdk","title":"RowBoat Chat API &amp; SDK","text":"<ul> <li>RowBoat Chat API is a stateless HTTP API to interface with the assistant created on RowBoat Studio. You can use the API to drive end-user facing conversations in your app or website.</li> <li>RowBoat Chat SDK is a simple SDK (currently available in Python) which wraps the HTTP API under the hood. It offers both stateful and stateless (OpenAI-style) implementations.</li> </ul>"},{"location":"#steps","title":"Steps","text":"<p>RowBoat Studio:</p> <ol> <li>Describe the assistant you are looking to build, to copilot</li> <li>Review and apply the agents (and tools) created by copilot</li> <li>Configure MCP servers and tools and connect them to agents</li> <li>Chat with your assistant in the playground</li> <li>Deploy and use the HTTP API or Python SDK to integrate the agents into your system</li> </ol>"},{"location":"#why-rowboat","title":"Why RowBoat?","text":"<p>Rowboat is the fastest way to build and deploy MCP connected multi-agents</p> <ol> <li>Build complex assistants using plain language and a visual interface</li> <li>Integrate tools and MCP servers in minutes</li> <li>Expedite your multi-agent AI roadmap using battle-tested tooling</li> </ol>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>To set up our open-source installation, see Github Readme</li> <li>To sign up for our managed offering (beta), please email us at founders@rowboatlabs.com</li> </ul>"},{"location":"add_tools/","title":"Add tools","text":""},{"location":"add_tools/#add-tools-to-agents","title":"Add tools to agents","text":"<p>In Rowboat, you can add tools to your agents by (a) selecting from a in-built library of MCP tools (b) adding your own customer MCP servers (c) integrating your APIs through a webhook (e) mocking tool calls to test the system.</p>"},{"location":"add_tools/#adding-mcp-tools","title":"Adding MCP tools","text":""},{"location":"add_tools/#hosted-mcp-library","title":"Hosted MCP Library","text":"<p>Rowboat has partnered with  to provide a growing library of hosted MCP servers. You can obtain a Klavis API key and set it using:</p> <pre><code>export KLAVIS_API_KEY=your-klavis-api-key\n</code></pre> <p></p> <p>Enable any of the hosted MCP servers by clicking on the enable button. The server will take approximately 10 seconds to spin up.</p> <p></p> <p>For most servers, you will need to authorize it by clicking on the 'Auth' button and connecting to your account e.g. connecting to you github or slack account</p> <p>The servers you have enabled will show up under tools section in the build view and can be added to any of the agents.</p> <p></p> <p>Note: For GSuite tools, you need to get a Google Client ID and set it using:</p> <pre><code>export KLAVIS_GOOGLE_CLIENT_ID=your-google-client-id\n</code></pre> <p>To obtain a Google Client ID: 1. Go to the Google Cloud Console 2. Create a new project or select an existing one 3. Go to \"APIs &amp; Services\" \u2192 \"OAuth consent screen\" and complete the setup 4. Go to \"APIs &amp; Services\" \u2192 \"Credentials\" \u2192 \"OAuth client ID\" and create credentials for web application.</p>"},{"location":"add_tools/#custom-mcp-server","title":"Custom MCP Server","text":"<p>You can add any running MCP server in Settings -&gt; Tools.</p> <p></p> <p>You can use supergateway to expose any MCP stdio server as an SSE server.</p> <p>Now, you can import the tools from the MCP server in the Build view.</p> <p></p>"},{"location":"add_tools/#adding-mock-tools","title":"Adding mock tools","text":"<p>You can mock any tool you have created by checking the 'Mock tool responses' option.</p> <p></p>"},{"location":"add_tools/#debug-tool-calls-in-the-playground","title":"Debug tool calls in the playground","text":"<p>When agents call tools during a chat in the playground, the tool call parameters and response are available for debugging real-time. For testing purposes, the platform can produce mock tool responses in the playground, without integrating actual tools.</p> <p></p>"},{"location":"agents/","title":"Agents","text":""},{"location":"agents/#overview","title":"Overview","text":"<ul> <li>Agents carry out a specific part of the conversation and / or perform tasks like orchestrating between other agents, triggering internal processes and fetching information.</li> <li>Agents carry out tasks through tools provided to them.</li> <li>Agents can be connected to other agents through a mention in the agent's instruction.</li> </ul>"},{"location":"agents/#agent-configurations","title":"Agent Configurations","text":""},{"location":"agents/#description","title":"Description","text":"<p>The description conveys the agent's role in the multi-agent system. Writing a good description is important for other agents to know when to pass control of the conversation to an agent.</p>"},{"location":"agents/#instructions","title":"Instructions","text":"<p>Agent instructions are the backbone of an agent, defining its behavior. RowBoat Studio's copilot produces a good framework for agent instructions, involving Role, Steps to Follow, Scope and Guidelines. Since agents are powered by LLMs, general best practices while writing prompts apply.</p>"},{"location":"agents/#examples","title":"Examples","text":"<p>The agent uses examples as a reference for behavior in different scenarios. While there are no prescribed formats to provide examples in, examples should include what the user might say, what the agent should respond with as well as indications of any tool calls to be made.</p>"},{"location":"agents/#prompts","title":"Prompts","text":"<p>Prompts attached to an agent will be used by the agent in addition to instructions.</p>"},{"location":"agents/#tools","title":"Tools","text":"<p>Tools attached to an agent will be put out as tool calls. The behavior of when to invoke tools can be fine-tuned by specifying corresponding instructions or prompts. Adding examples to agents can also be useful in controlling tool call behavior.</p>"},{"location":"agents/#connected-agents","title":"Connected Agents","text":"<p>In the agent instructions, the connected agents are shown with an '@mention'. If the agent mentioned in an instruction (connected agent) does not actually exist, the connected agent's name would show up with an '!' to call to attention.</p>"},{"location":"agents/#model","title":"Model","text":"<p>RowBoat currently supports OpenAI LLMs. Agents can be configured to use GPT-4o or GPT-4o-mini.</p>"},{"location":"create_agents/","title":"Create agents","text":""},{"location":"create_agents/#create-the-set-of-initial-agents","title":"Create the set of initial agents","text":"<p>Copilot can set up agents for you from scratch.</p>"},{"location":"create_agents/#instruct-copilot","title":"Instruct copilot","text":"<p>First, tell it about the initial set of agents that make up your assistant.</p> <p></p> <p>Using copilot to create your initial set of agents helps you leverage best practices in formatting agent instructions and connecting agents to each other as a graph, all of which have been baked into copilot.</p>"},{"location":"create_agents/#inspect-the-agents","title":"Inspect the agents","text":"<p>Once you apply changes, inspect the agents to see how copilot has built them. Specifically, note the Instructions, and Examples in each agent.</p> <p></p>"},{"location":"data_sources/","title":"Data sources","text":"<p>Coming soon.</p>"},{"location":"graph/","title":"Graph-based Framework","text":""},{"location":"graph/#overview","title":"Overview","text":"<ul> <li>Multi-agent systems are popularly represented as graphs, where each agent is a node in the graph.  </li> <li>In RowBoat, agents are connected to each other as Directed Acyclic Graphs (DAG).</li> <li>The graph is also called a workflow, which defines agents, tools, and their connections.</li> <li>Since the graph is directed, the control of conversation flows from \"parent\" agents to their \"children\" agents</li> <li>Every agent is responsible for carrying out a specific part of the workflow, which can involve conversing with the user and / or carrying out tasks such as directing the conversation to other agents.</li> <li>Langgraph and Swarm are examples of open-source frameworks used to define multi-agent graphs. RowBoat currently supports a Swarm implementation and will extend to Langgraph too in the future.</li> </ul>"},{"location":"graph/#control-passing","title":"Control Passing","text":"<ul> <li>While defining the workflow, an agent is designated as the Start agent, to which the first turn of chat will be directed. Typically the Start agent is responsible for triaging the user's query at a high-level and passing control to relevant specific agents which can address the user's needs.</li> <li>In any turn of chat, the agent currently in control of the chat has one of 3 options: a) respond to the user (or put out tool calls), b) transfer the chat to any of its children agents or c) transfer the chat back to its parent agent.</li> <li>Agents use internal tool calls to transfer the chat to other agents.</li> <li>Thus, control passing is achieved by allowing agents to decide flow of control autonomously.</li> <li>To the user, the assistant will appear as a unified system, while agents work under the hood.</li> </ul>"},{"location":"graph/#pipelines","title":"Pipelines","text":"<ul> <li>RowBoat also has the concept of pipelines - specialized agents invoked sequentially after an agent in the graph has produced a user-facing response. </li> <li>E.g. a pipeline with a post processing agent and a guardrail agent will ensure that every response is post processed and guardrailed for appropriateness before presenting it to the user.</li> </ul>"},{"location":"hosted_setup/","title":"Using the Hosted App","text":"<ul> <li>This is the developers guide to self-hosting the open-source version of RowBoat.</li> <li>Please see our Introduction page before referring to this guide.</li> <li>For direct installation steps, please head to the README of RowBoat's Github repo: @rowboatlabs/rowboat. This page provides more context about the installation process and the different components involved. </li> </ul>"},{"location":"hosted_setup/#overview","title":"Overview","text":"<p>RowBoat's codebase has three main components:</p> Component Description Agents Python framework responsible for carrying out multi-agent conversations Copilot Python framework powering the copilot in RowBoat Studio RowBoat Frontend and backend services to power RowBoat Studio and Chat APIs <p>These components are structured as separate services, each containerized with Docker. Running <code>docker-compose up --build</code> enables you to use the Studio in your browser, as well as stands up the APIs and SDK. </p>"},{"location":"hosted_setup/#prerequisites","title":"Prerequisites","text":"<p>All of these prerequistes have open-source or free versions.</p> Prerequisite Description Docker Bundles and builds all services OpenAI API Key Agents and Copilot services are powered by OpenAI LLMs MongoDB Stores workflow versions, chats and RAG embeddings Auth0 Account Handles user authentication and identity management for Studio <p>Refer to our Github Readme for Prerequisites to set up prerequisites.</p>"},{"location":"hosted_setup/#setting-up","title":"Setting up","text":"<p>Refer to our Github Readme for Local Development to set up Studio, Chat API and SDK via <code>docker-compose</code>. </p>"},{"location":"hosted_setup/#testing-studio","title":"Testing Studio","text":"<ol> <li> <p>Once you are set up, you should be able to login to the Studio (default local URL: http://localhost:3000) via Auth0's login options (Gmail, Github etc.) </p> </li> <li> <p>Once in Studio, create a new blank project or use one of the example templates:  </p> </li> <li> <p>Use the copilot to help you build agents:  </p> </li> <li> <p>Ensure that the correct agent is set as the \"start agent\":  </p> </li> <li> <p>Test out a chat in the playground to verify the agents' behavior:  </p> </li> </ol>"},{"location":"hosted_setup/#testing-the-chat-api","title":"Testing the Chat API","text":"<p>You can use the API directly at http://localhost:3000/api/v1/ - Project ID is available in the URL of the project page - API Key can be generated from the project config page at <code>/projects/&lt;PROJECT_ID&gt;/config</code></p> <p>Below is an example request and response. Modify the user message in the request, based on your example project.</p> <p>Request:</p> <pre><code>curl --location 'http://localhost:3000/api/v1/&lt;PROJECT_ID&gt;/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer &lt;API_KEY&gt;' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is my pending payment amount?\"\n        }\n    ]\n}'\n</code></pre> <p>Response: The last message in <code>messages</code> is either a user-facing response or a tool call by the assistant.</p> <pre><code>{\n    \"messages\": [\n        {\n            \"sender\": \"Credit Card Hub\",\n            \"role\": \"assistant\",\n            \"response_type\": \"internal\",\n            \"content\": null,\n            \"created_at\": \"2025-02-01T06:55:47.843909\",\n            \"current_turn\": true,\n            \"tool_calls\": [\n                {\n                    \"function\": {\n                    \"arguments\": \"{\\\"args\\\":\\\"\\\",\\\"kwargs\\\":\\\"\\\"}\",\n                    // Internal tool calls are used to transfer between agents\n                    \"name\": \"transfer_to_outstanding_payment\"\n                    },\n                    \"id\": \"call_7jGpwpVvzhZFOyRgxHFkdOdU\",\n                    \"type\": \"function\"\n                }\n            ]\n        },\n        {\n            \"tool_name\": \"transfer_to_outstanding_payment\",\n            \"role\": \"tool\",\n            \"content\": \"{\\\"assistant\\\": \\\"Outstanding Payment\\\"}\",\n            \"tool_call_id\": \"call_7jGpwpVvzhZFOyRgxHFkdOdU\"\n        },\n        {\n            \"sender\": \"Outstanding Payment\",\n            \"role\": \"assistant\",\n            // Response is not user-facing, to enable further post processing\n            \"response_type\": \"internal\",\n            \"content\": \"Sure, could you provide the last four digits of your card or your registered mobile number so I can look up your pending payment amount?\",\n            \"created_at\": \"2025-02-01T06:55:49.648008\",\n            \"current_turn\": true\n        },\n        {\n            \"sender\": \"Outstanding Payment &gt;&gt; Post process\",\n            \"role\": \"assistant\",\n            // Response is user-facing\n            \"response_type\": \"external\",\n            \"content\": \"Sure, please provide the last four digits of your card or your registered mobile number so I can check your pending payment amount.\",\n            \"created_at\": \"2025-02-01T06:55:49.648008\",\n            \"current_turn\": true\n        }\n    ],\n    \"state\": {\n        // .. state data\n    }\n}\n</code></pre>"},{"location":"hosted_setup/#testing-the-python-chat-sdk","title":"Testing the Python Chat SDK","text":"<pre><code>pip install rowboat\n</code></pre> <p>Modify the user message in <code>messages</code>, based on your example project.</p> <pre><code>from rowboat import Client\n\nclient = Client(\n    host=\"http://localhost:3000\",\n    project_id=\"&lt;PROJECT_ID&gt;\",\n    api_key=\"&lt;API_KEY&gt;\"  # Generate this from /projects/&lt;PROJECT_ID&gt;/config\n)\n\n# Simple chat interaction\nmessages = [{\"role\": \"user\", \"content\": \"What is my pending payment amount?\"}]\nresponse_messages, state = client.chat(messages=messages)\n</code></pre> <p>The last message in <code>response_messages</code> is either a user-facing response or a tool call by the assistant.</p>"},{"location":"license/","title":"Open Source License","text":"<p>RowBoat is available under the Apache 2.0 License:</p> <pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [2024] [RowBoat Labs]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"oss_installation/","title":"Open Source Installation","text":"<ul> <li>This is the developers guide to self-hosting the open-source version of RowBoat. To get started with the hosted app, please see Using the Hosted App</li> <li>Please see our Introduction page before referring to this guide.</li> <li>For direct installation steps, please head to the README of RowBoat's Github repo: @rowboatlabs/rowboat. This page provides more context about the installation process and the different components involved.</li> </ul>"},{"location":"oss_installation/#overview","title":"Overview","text":"<p>RowBoat's codebase has three main components:</p> Component Description Agents Python framework responsible for carrying out multi-agent conversations Copilot Python framework powering the copilot in RowBoat Studio RowBoat Frontend and backend services to power RowBoat Studio and Chat APIs <p>These components are structured as separate services, each containerized with Docker. Running <code>docker-compose up --build</code> enables you to use the Studio in your browser, as well as stands up the APIs and SDK.</p>"},{"location":"oss_installation/#prerequisites","title":"Prerequisites","text":"<p>All of these prerequisites have open-source or free versions.</p> Prerequisite Description Docker Bundles and builds all services OpenAI API Key Agents and Copilot services are powered by OpenAI LLMs MongoDB Stores workflow versions, chats and RAG embeddings <p>Refer to our Github Readme for Prerequisites to set up prerequisites.</p>"},{"location":"oss_installation/#setting-up","title":"Setting up","text":"<p>Refer to our Github Readme for Local Development to set up Studio, Chat API and SDK via <code>docker-compose</code>.</p>"},{"location":"playground/","title":"Test chats in the playground","text":""},{"location":"playground/#try-an-example-chat-in-the-playground","title":"Try an example chat in the playground","text":""},{"location":"playground/#chat-with-the-assistant","title":"Chat with the assistant","text":"<p>The playground is intended to test out the assistant as you build it. The User and Assistant messages represent the conversation that your end-user will have if your assistant is deployed in production. The playground also has debug elements which show the flow of control between different agents in your system, as well as which agent finally responded to the user.</p> <p></p>"},{"location":"prompts/","title":"Prompts","text":"<ul> <li>Prompts are reusable pieces of agent instructions in Studio.</li> <li>Prompts can be defined once and reused across multiple agents.</li> <li>Common examples of prompts are style prompts which indicate brand voice and structured output prompts which specify a format for the agent to provide its output in (e.g. ReAct)</li> </ul>"},{"location":"setup/","title":"Getting Started","text":""},{"location":"setup/#getting-started","title":"Getting started","text":"<ul> <li>\u2728 Start from an idea \u2192 Copilot builds your multi-agent workflows   E.g. \"Build me an assistant for a food delivery company to handle delivery status and missing items. Include the necessary tools.\"</li> <li>\ud83c\udf10 Connect MCP servers   Add the MCP servers in Settings \u2192 import the tools into Rowboat.</li> <li>\ud83d\udcde Integrate into your app using the HTTP API or Python SDK   Grab the Project ID and generated API Key from Settings and use the API.</li> </ul> <p>Powered by OpenAI's Agents SDK, Rowboat is the fastest way to build multi-agents!</p>"},{"location":"setup/#quick-start","title":"Quick start","text":"<p>Step 1. Set your OpenAI key:</p> <pre><code>export OPENAI_API_KEY=your-openai-api-key\n</code></pre> <p>Step 2. Clone the repository and start Rowboat docker</p> <pre><code>git clone git@github.com:rowboatlabs/rowboat.git\ncd rowboat\ndocker-compose up --build\n</code></pre> <p>Step 3. Access the app at http://localhost:3000.</p> <p>Note: See the Using custom LLM providers section below for using custom providers like OpenRouter and LiteLLM.</p>"},{"location":"setup/#demo","title":"Demo","text":""},{"location":"setup/#create-a-multi-agent-assistant-with-mcp-tools-by-chatting-with-rowboat","title":"Create a multi-agent assistant with MCP tools by chatting with Rowboat","text":""},{"location":"setup/#integrate-with-rowboat-agents","title":"Integrate with Rowboat agents","text":"<p>There are 2 ways to integrate with the agents you create in Rowboat</p> <p>Option #1: HTTP API</p> <p>You can use the API directly at http://localhost:3000/api/v1/. See API Docs for details.</p> <pre><code>curl --location 'http://localhost:3000/api/v1/&lt;PROJECT_ID&gt;/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer &lt;API_KEY&gt;' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"tell me the weather in london in metric units\"\n        }\n    ],\n    \"state\": null\n}'\n</code></pre> <p>Option #2: Python SDK</p> <p>You can use the included Python SDK to interact with the Agents</p> <pre><code>from rowboat import Client, StatefulChat\nfrom rowboat.schema import UserMessage, SystemMessage\n\n# Initialize the client\nclient = Client(\n    host=\"http://localhost:3000\",\n    project_id=\"&lt;PROJECT_ID&gt;\",\n    api_key=\"&lt;API_KEY&gt;\"\n)\n\n# Create a stateful chat session (recommended)\nchat = StatefulChat(client)\nresponse = chat.run(\"What's the weather in London?\")\nprint(response)\n\n# Or use the low-level client API\nmessages = [\n    SystemMessage(role='system', content=\"You are a helpful assistant\"),\n    UserMessage(role='user', content=\"Hello, how are you?\")\n]\n\n# Get response\nresponse = client.chat(messages=messages)\nprint(response.messages[-1].content)\n</code></pre>"},{"location":"setup/#using-custom-llm-providers","title":"Using custom LLM providers","text":"<p>By default, Rowboat uses OpenAI LLMs (gpt-4o, gpt-4.1, etc.) for both agents and copilot, when you export your OPENAI_API_KEY. </p> <p>However, you can also configure custom LLM providers (e.g. LiteLLM, OpenRouter) to use any of the hundreds of available LLMs beyond OpenAI, such as Claude, DeepSeek, Ollama LLMs and so on.</p> <p>Step 1: Set up your custom LLM provider using the variables below, for example (assuming LiteLLM):</p> <pre><code>export PROVIDER_BASE_URL=http://host.docker.internal:4000/\nexport PROVIDER_API_KEY=sk-1234\n</code></pre> <p>Rowboat uses \"gpt-4.1\" as the default model for agents and copilot but this can be overridden as follows, for example (assuming LiteLLM):</p> <pre><code>export PROVIDER_DEFAULT_MODEL=claude-3-7-sonnet-latest\nexport PROVIDER_COPILOT_MODEL=gpt-4o\n</code></pre> <p>Notes:</p> <ul> <li>Copilot is optimized for gpt-4o/gpt-4.1. We strongly recommend using these models for best performance.</li> <li>You can specify different models for the copilot and each agent, but all of them must belong to the same provider (e.g. LiteLLM)</li> <li>The integration is provider-agnostic and should work with any service that implements the OpenAI messages format.</li> <li>OpenAI-specific tools (e.g., web_search) will not work with non-OpenAI providers. If you get an error, remove these tools.</li> </ul> <p>Step 2 (No change): Clone the repository and start Rowboat docker</p> <pre><code>git clone git@github.com:rowboatlabs/rowboat.git\ncd rowboat\ndocker-compose up --build\n</code></pre> <p>Step 3 (No change): Access the app at http://localhost:3000.</p>"},{"location":"simulate/","title":"Simulate","text":""},{"location":"simulate/#simulate-real-world-user-scenarios","title":"Simulate real-world user scenarios","text":"<p>Create a test-bench of real-world scenarios in the simulator. </p> <p>Run the scenarios as simulated chats betweeen a user (role-played) and the assistant, in the playground. </p>"},{"location":"studio_overview/","title":"Building Assistants in Studio","text":"<p>This is a guide to building your first assistant on RowBoat Studio, with examples.</p> <p>Prerequisite:</p> <ol> <li>Open Source Users: Complete the open-source installation steps to set up RowBoat Studio.</li> <li>Hosted App Users: Sign in to https://app.rowboatlabs.com/</li> </ol>"},{"location":"testing/","title":"Testing Your Setup","text":""},{"location":"testing/#testing-studio","title":"Testing Studio","text":"<ol> <li>Once you are set up, you should be able to login to the Studio via Auth0's login options (Gmail, Github etc.). </li> <li>For the open source installation, the URL for Studio is http://localhost:3000</li> <li> <p>To use our hosted app, the URL for Studio is https://app.rowboatlabs.com </p> </li> <li> <p>Once in Studio, create a new blank project or browse through one of the example projects:  </p> </li> <li> <p>Use the copilot to help you build agents:  </p> </li> <li> <p>Ensure that the correct agent is set as the \"start agent\":  </p> </li> <li> <p>Test out a chat in the playground to verify the agents' behavior:  </p> </li> </ol>"},{"location":"testing/#testing-the-chat-api","title":"Testing the Chat API","text":"<ul> <li>For the open source installation, the <code>&lt;HOST&gt;</code> is http://localhost:3000</li> <li>When using the hosted app, the <code>&lt;HOST&gt;</code> is https://app.rowboatlabs.com</li> <li><code>&lt;PROJECT_ID&gt;</code> is available in the URL of the project page</li> <li>API Key can be generated from the project config page at <code>&lt;HOST&gt;/projects/&lt;PROJECT_ID&gt;/config</code></li> </ul> <p>Below is an example request and response. Modify the user message in the request, based on your example project.</p> <p>Request:</p> <pre><code>curl --location 'http://&lt;HOST&gt;/api/v1/&lt;PROJECT_ID&gt;/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer &lt;API_KEY&gt;' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is my pending payment amount?\"\n        }\n    ]\n}'\n</code></pre> <p>Response: The last message in <code>messages</code> is either a user-facing response or a tool call by the assistant.</p> <pre><code>{\n    \"messages\": [\n        {\n            \"sender\": \"Credit Card Hub\",\n            \"role\": \"assistant\",\n            \"response_type\": \"internal\",\n            \"content\": null,\n            \"created_at\": \"2025-02-01T06:55:47.843909\",\n            \"current_turn\": true,\n            \"tool_calls\": [\n                {\n                    \"function\": {\n                    \"arguments\": \"{\\\"args\\\":\\\"\\\",\\\"kwargs\\\":\\\"\\\"}\",\n                    // Internal tool calls are used to transfer between agents\n                    \"name\": \"transfer_to_outstanding_payment\"\n                    },\n                    \"id\": \"call_7jGpwpVvzhZFOyRgxHFkdOdU\",\n                    \"type\": \"function\"\n                }\n            ]\n        },\n        {\n            \"tool_name\": \"transfer_to_outstanding_payment\",\n            \"role\": \"tool\",\n            \"content\": \"{\\\"assistant\\\": \\\"Outstanding Payment\\\"}\",\n            \"tool_call_id\": \"call_7jGpwpVvzhZFOyRgxHFkdOdU\"\n        },\n        {\n            \"sender\": \"Outstanding Payment\",\n            \"role\": \"assistant\",\n            // Response is not user-facing, to enable further post processing\n            \"response_type\": \"internal\",\n            \"content\": \"Sure, could you provide the last four digits of your card or your registered mobile number so I can look up your pending payment amount?\",\n            \"created_at\": \"2025-02-01T06:55:49.648008\",\n            \"current_turn\": true\n        },\n        {\n            \"sender\": \"Outstanding Payment &gt;&gt; Post process\",\n            \"role\": \"assistant\",\n            // Response is user-facing\n            \"response_type\": \"external\",\n            \"content\": \"Sure, please provide the last four digits of your card or your registered mobile number so I can check your pending payment amount.\",\n            \"created_at\": \"2025-02-01T06:55:49.648008\",\n            \"current_turn\": true\n        }\n    ],\n    \"state\": {\n        // .. state data\n    }\n}\n</code></pre>"},{"location":"testing/#testing-the-python-chat-sdk","title":"Testing the Python Chat SDK","text":"<ul> <li>For the open source installation, the <code>&lt;HOST&gt;</code> is http://localhost:3000</li> <li>When using the hosted app, the <code>&lt;HOST&gt;</code> is https://app.rowboatlabs.com</li> <li><code>&lt;PROJECT_ID&gt;</code> is available in the URL of the project page</li> <li>API Key can be generated from the project config page at <code>&lt;HOST&gt;/projects/&lt;PROJECT_ID&gt;/config</code></li> </ul> <pre><code>pip install rowboat\n</code></pre> <p>Modify the user message in <code>messages</code>, based on your example project.</p> <pre><code>from rowboat import Client\n\nclient = Client(\n    host=\"&lt;HOST&gt;\",\n    project_id=\"&lt;PROJECT_ID&gt;\",\n    api_key=\"&lt;API_KEY&gt;\"  # Generate this from /projects/&lt;PROJECT_ID&gt;/config\n)\n\n# Simple chat interaction\nmessages = [{\"role\": \"user\", \"content\": \"What is my pending payment amount?\"}]\nresponse_messages, state = client.chat(messages=messages)\n</code></pre> <p>The last message in <code>response_messages</code> is either a user-facing response or a tool call by the assistant.</p>"},{"location":"tools/","title":"Tools","text":"<ul> <li>Tools are used to carry out specific tasks such as fetching or updating information.</li> <li>Tools can be defined once in RowBoat Studio and reused across different agents.</li> <li>RowBoat uses OpenAI style tools with name, description and parameters.</li> <li>For the purposes of quick testing in the Playground, RowBoat Studio can mock tool responses based on tool descriptions.</li> <li>Developers can easily connect tools to APIs by configuring MCP servers or Webhook URL in Settings.</li> </ul>"},{"location":"update_agents/","title":"Update agents","text":""},{"location":"update_agents/#update-agent-behavior","title":"Update agent behavior","text":"<p>There are three ways for you to update the agent's behavior:</p>"},{"location":"update_agents/#1-with-help-of-copilot","title":"1. With help of Copilot","text":"<p>Copilot can help you update agent behavior. It is also aware of the current chat in the playground so you can make references to the current chat while instructing copilot to update agents.</p> <p></p>"},{"location":"update_agents/#2-using-the-generate-button","title":"2. Using the Generate button","text":""},{"location":"update_agents/#3-by-manually-editing-the-instructions","title":"3. By manually editing the instructions","text":"<p>You can manually edit the agent instructions anytime.</p> <p></p>"},{"location":"using_rag/","title":"Using RAG in Rowboat","text":"<p>Rowboat provides multiple ways to enhance your agents' context with Retrieval-Augmented Generation (RAG). This guide will help you set up and use each RAG features.</p>"},{"location":"using_rag/#quick-start","title":"Quick Start","text":"<p>Text RAG and local file uploads are enabled by default - no configuration needed! Just start using them right away.</p>"},{"location":"using_rag/#rag-features","title":"RAG Features","text":""},{"location":"using_rag/#1-text-rag","title":"1. Text RAG","text":"<p>\u2705 Enabled by default:</p> <ul> <li>Process and reason over text content directly</li> <li>No configuration required</li> </ul>"},{"location":"using_rag/#2-local-file-uploads","title":"2. Local File Uploads","text":"<p>\u2705 Enabled by default:</p> <ul> <li>Upload PDF files directly from your device</li> <li>Files are stored locally</li> <li>No configuration required</li> <li>Files are parsed using OpenAI by default</li> <li>For larger files, we recommend using Gemini models - see section below.</li> </ul>"},{"location":"using_rag/#21-using-gemini-for-file-parsing","title":"2.1 Using Gemini for File Parsing","text":"<p>To use Google's Gemini model for parsing uploaded PDFs, set the following variable:</p> <pre><code># Enable Gemini for file parsing\nexport USE_GEMINI_FILE_PARSING=true\nexport GOOGLE_API_KEY=your_google_api_key\n</code></pre>"},{"location":"using_rag/#3-url-scraping","title":"3. URL Scraping","text":"<p>Rowboat uses Firecrawl for URL scraping. To enable URL scraping, set the following variables:</p> <pre><code>export USE_RAG_SCRAPING=true\nexport FIRECRAWL_API_KEY=your_firecrawl_api_key\n</code></pre>"},{"location":"using_rag/#advanced-rag-features","title":"Advanced RAG features","text":""},{"location":"using_rag/#1-file-uploads-backed-by-s3","title":"1. File Uploads Backed by S3","text":"<p>To enable S3 file uploads, set the following variables:</p> <pre><code># Enable S3 uploads\nexport USE_RAG_S3_UPLOADS=true\n\n# S3 Configuration\nexport AWS_ACCESS_KEY_ID=your_access_key\nexport AWS_SECRET_ACCESS_KEY=your_secret_key\nexport RAG_UPLOADS_S3_BUCKET=your_bucket_name\nexport RAG_UPLOADS_S3_REGION=your_region\n</code></pre>"},{"location":"using_rag/#2-changing-default-parsing-model","title":"2. Changing Default Parsing Model","text":"<p>By default, uploaded PDF files are parsed using <code>gpt-4o</code>. You can customize this by setting the following:</p> <pre><code># Override the default parsing model\nexport FILE_PARSING_MODEL=your-preferred-model\n</code></pre> <p>You can also change the model provider like so:</p> <pre><code># Optional: Override the parsing provider settings\nexport FILE_PARSING_PROVIDER_BASE_URL=your-provider-base-url\nexport FILE_PARSING_PROVIDER_API_KEY=your-provider-api-key\n</code></pre>"},{"location":"using_rag/#3-embedding-model-options","title":"3. Embedding Model Options","text":"<p>By default, Rowboat uses OpenAI's <code>text-embedding-3-small</code> model for generating embeddings. You can customize this by setting the following:</p> <pre><code># Override the default embedding model\nexport EMBEDDING_MODEL=your-preferred-model\nexport EMBEDDING_VECTOR_SIZE=1536\n</code></pre> <p>Important NOTE</p> <p>The default size for the vectors index is 1536. If you change this value, then you must delete the index and set it up again:</p> <pre><code>docker-compose --profile delete_qdrant --profile qdrant up --build delete_qdrant qdrant\n</code></pre> <p>followed by:</p> <pre><code>./start # this will recreate the index\n</code></pre> <p>You can also change the model provider like so:</p> <pre><code># Optional: Override the embedding provider settings\nexport EMBEDDING_PROVIDER_BASE_URL=your-provider-base-url\nexport EMBEDDING_PROVIDER_API_KEY=your-provider-api-key\n</code></pre> <p>If you don't specify the provider settings, Rowboat will use OpenAI as the default provider.</p>"},{"location":"using_the_api/","title":"Using the API","text":"<p>This is a guide on using the HTTP API to power conversations with the assistant created in Studio.</p>"},{"location":"using_the_api/#deploy-your-assistant-to-production-on-studio","title":"Deploy your assistant to production on Studio","text":""},{"location":"using_the_api/#obtain-api-key-and-project-id","title":"Obtain API key and Project ID","text":"<p>Generate API keys via the developer configs in your project. Copy the Project ID from the same page. </p>"},{"location":"using_the_api/#api-endpoint","title":"API Endpoint","text":"<pre><code>POST &lt;HOST&gt;/api/v1/&lt;PROJECT_ID&gt;/chat\n</code></pre> <p>Where:</p> <ul> <li>For self-hosted: <code>&lt;HOST&gt;</code> is <code>http://localhost:3000</code></li> </ul>"},{"location":"using_the_api/#authentication","title":"Authentication","text":"<p>Include your API key in the Authorization header:</p> <pre><code>Authorization: Bearer &lt;API_KEY&gt;\n</code></pre>"},{"location":"using_the_api/#examples","title":"Examples","text":""},{"location":"using_the_api/#first-turn","title":"First Turn","text":"<pre><code>curl --location '&lt;HOST&gt;/api/v1/&lt;PROJECT_ID&gt;/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer &lt;API_KEY&gt;' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello, can you help me?\"\n        }\n    ],\n    \"state\": null\n}'\n</code></pre> <p>Response:</p> <pre><code>{\n    \"messages\": [\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Hello! Yes, I'd be happy to help you. What can I assist you with today?\",\n            \"agenticResponseType\": \"external\"\n        }\n    ],\n    \"state\": {\n        \"last_agent_name\": \"MainAgent\"\n    }\n}\n</code></pre>"},{"location":"using_the_api/#subsequent-turn","title":"Subsequent Turn","text":"<p>Notice how we include both the previous messages and the state from the last response:</p> <pre><code>curl --location '&lt;HOST&gt;/api/v1/&lt;PROJECT_ID&gt;/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer &lt;API_KEY&gt;' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello, can you help me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Hello! Yes, I'd be happy to help you. What can I assist you with today?\",\n            \"agenticResponseType\": \"external\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"What services do you offer?\"\n        }\n    ],\n    \"state\": {\n        \"last_agent_name\": \"MainAgent\"\n    }\n}'\n</code></pre>"},{"location":"using_the_api/#api-specification","title":"API Specification","text":""},{"location":"using_the_api/#request-schema","title":"Request Schema","text":"<pre><code>{\n    // Required fields\n    messages: Message[];      // Array of message objects representing the conversation history\n    state: any;              // State object from previous response, or null for first message\n\n    // Optional fields\n    workflowId?: string;     // Specific workflow ID to use (defaults to production workflow)\n    testProfileId?: string;  // Test profile ID for simulation\n}\n</code></pre>"},{"location":"using_the_api/#message-types","title":"Message Types","text":"<p>Messages can be one of the following types:</p> <ol> <li>System Message</li> </ol> <pre><code>{\n    role: \"system\";\n    content: string;\n}\n</code></pre> <ol> <li>User Message</li> </ol> <pre><code>{\n    role: \"user\";\n    content: string;\n}\n</code></pre> <ol> <li>Assistant Message</li> </ol> <pre><code>{\n    role: \"assistant\";\n    content: string;\n    agenticResponseType: \"internal\" | \"external\";\n    agenticSender?: string | null;\n}\n</code></pre>"},{"location":"using_the_api/#response-schema","title":"Response Schema","text":"<pre><code>{\n    messages: Message[];  // Array of new messages from this turn\n    state: any;          // State object to pass in the next request\n}\n</code></pre>"},{"location":"using_the_api/#important-notes","title":"Important Notes","text":"<ol> <li>Always pass the complete conversation history in the <code>messages</code> array</li> <li>Always include the <code>state</code> from the previous response in your next request</li> <li>The last message in the response's <code>messages</code> array will be a user-facing assistant message (<code>agenticResponseType: \"external\"</code>)</li> </ol>"},{"location":"using_the_api/#rate-limiting","title":"Rate Limiting","text":"<p>The API has rate limits per project. If exceeded, you'll receive a 429 status code.</p>"},{"location":"using_the_api/#error-responses","title":"Error Responses","text":"<ul> <li>400: Invalid request body or missing/invalid Authorization header</li> <li>403: Invalid API key</li> <li>404: Project or workflow not found</li> <li>429: Rate limit exceeded</li> </ul>"},{"location":"using_the_sdk/","title":"Using the Python SDK","text":"<p>This is a guide on using the RowBoat Python SDK as an alternative to the RowBoat HTTP API to power conversations with the assistant created in Studio.</p>"},{"location":"using_the_sdk/#prerequisites","title":"Prerequisites","text":"<ul> <li><code>pip install rowboat</code></li> <li>Deploy your assistant to production</li> <li>Obtain your <code>&lt;API_KEY&gt;</code> and <code>&lt;PROJECT_ID&gt;</code></li> </ul>"},{"location":"using_the_sdk/#api-host","title":"API Host","text":"<ul> <li>For the open source installation, the <code>&lt;HOST&gt;</code> is http://localhost:3000</li> <li>When using the hosted app, the <code>&lt;HOST&gt;</code> is https://app.rowboatlabs.com</li> </ul>"},{"location":"using_the_sdk/#usage","title":"Usage","text":""},{"location":"using_the_sdk/#basic-usage-with-statefulchat","title":"Basic Usage with StatefulChat","text":"<p>The easiest way to interact with Rowboat is using the <code>StatefulChat</code> class, which maintains conversation state automatically:</p> <pre><code>from rowboat import Client, StatefulChat\n\n# Initialize the client\nclient = Client(\n    host=\"&lt;HOST&gt;\",\n    project_id=\"&lt;PROJECT_ID&gt;\",\n    api_key=\"&lt;API_KEY&gt;\"\n)\n\n# Create a stateful chat session\nchat = StatefulChat(client)\n\n# Have a conversation\nresponse = chat.run(\"What is the capital of France?\")\nprint(response)\n# The capital of France is Paris.\n\n# Continue the conversation - the context is maintained automatically\nresponse = chat.run(\"What other major cities are in that country?\")\nprint(response)\n# Other major cities in France include Lyon, Marseille, Toulouse, and Nice.\n\nresponse = chat.run(\"What's the population of the first city you mentioned?\")\nprint(response)\n# Lyon has a population of approximately 513,000 in the city proper.\n</code></pre>"},{"location":"using_the_sdk/#advanced-usage","title":"Advanced Usage","text":""},{"location":"using_the_sdk/#using-a-specific-workflow","title":"Using a specific workflow","text":"<p>You can specify a workflow ID to use a particular conversation configuration:</p> <pre><code>chat = StatefulChat(\n    client,\n    workflow_id=\"&lt;WORKFLOW_ID&gt;\"\n)\n</code></pre>"},{"location":"using_the_sdk/#using-a-test-profile","title":"Using a test profile","text":"<p>You can specify a test profile ID to use a specific test configuration:</p> <pre><code>chat = StatefulChat(\n    client,\n    test_profile_id=\"&lt;TEST_PROFILE_ID&gt;\"\n)\n</code></pre>"},{"location":"using_the_sdk/#low-level-usage","title":"Low-Level Usage","text":"<p>For more control over the conversation, you can use the <code>Client</code> class directly:</p> <pre><code>from rowboat.schema import UserMessage\n\n# Initialize the client\nclient = Client(\n    host=\"&lt;HOST&gt;\",\n    project_id=\"&lt;PROJECT_ID&gt;\",\n    api_key=\"&lt;API_KEY&gt;\"\n)\n\n# Create messages\nmessages = [\n    UserMessage(role='user', content=\"Hello, how are you?\")\n]\n\n# Get response\nresponse = client.chat(messages=messages)\nprint(response.messages[-1].content)\n\n# For subsequent messages, you need to manage the message history and state manually\nmessages.extend(response.messages)\nmessages.append(UserMessage(role='user', content=\"What's your name?\"))\nresponse = client.chat(messages=messages, state=response.state)\n</code></pre>"}]}